if (Get-Module -ListAvailable -Name ImportExcel) {
    Write-Host "Module exists"
} 
else {
    Write-Host "Module [ImportExcel] does not exist, you need to install it in order to properly run this script" -ForegroundColor Red
    Write-Host "You should : " -ForegroundColor Yellow
    Write-Host "    Install-Module -Name ImportExcel " -ForegroundColor Yellow
    Write-Host "    manually download file from [https://www.powershellgallery.com/packages/ImportExcel/] " -ForegroundColor Yellow

    Exit
}

$dataSource = 'localhost'                                #only parameter needed, if SQL MI is target use <MI_Name.database.windows.net>
$subscriptionID= '<SubscriptionID>'                      #needed if SQL MI is target

#function used to calculate shorten Excel Tab name
function get-TabName {
   [CmdletBinding()]
    Param (
      [String]$text,
      [Int]$Length
   )
   
   $text=$text.Replace(".csv","")
   #Return $text.SubString(0, [math]::min($Length,$text.length))
   $Res=$text.SubString(0, [math]::min($Length,$text.length))
   if ($Res.Substring($Res.Length - 1 , 1) -eq "'")  {$Res=$Res.Substring(0, $Res.Length - 1 )  }

 Return $Res
}

function Cvs-ToExcel{
    param (
    [string] $FolderName,
    [string] $TimeStamp,
    [string] $OutputFolder    
    ) 

    cd $FolderName;

    $csvs = Get-ChildItem .\* -Include *.csv | Sort-Object Name
    $tabsCount=$csvs.Count
    $outputfilename =  "BP_Check_output_" + $TimeStamp + ".xlsx"
    $outputExcel = "$OutputFolder\$outputfilename" 

    Write-Host "Creating: $outputfilename, total: $tabsCount tabs" -ForegroundColor Yellow

    $prog = 0
    foreach ($csv in $csvs)
    {
 
        $SheetName= get-TabName $csv.Name -Length 29 #31


         #Write-Host  "Adding $csv.Name" -ForegroundColor Green
         $Perc= [Math]::Floor(100*$prog/190)
         Write-Progress -Activity "Adding tabs to Excel in progress" -Status "$Perc% Complete:" -PercentComplete $Perc


         Import-Csv -Path $csv | Export-Excel -Path $outputExcel -WorkSheetname $SheetName 
         $prog++
     }

     Write-Host "Creating index page!" -ForegroundColor Yellow

     $ExcelData = Open-ExcelPackage -Path $outputExcel
     $TabData= $ExcelData.Workbook.WorkSheets["_list"].Cells


     For ([int] $row =2 ; $row -lt $tabsCount ; $Row++)
        {
            $For1=$TabData[$Row,1].Value
            $xlLink = $TabData[$Row,2].Value
            Try {
                $xlLink=  $xlLink.Replace("'","''")
            }Catch { } # I could not care more gor these tabs !! :)
            $for2 = "'$xlLink'!A1"

            $Formula = "=Hyperlink(`"#$For2`" ,`"$For1`")"
            $TabData[$Row,3].Formula = $Formula
        }

        $Ws= $ExcelData.Workbook.WorkSheets["_list"]
        $Ws.Column(1).Width = 0
        $Ws.Column(2).Width = 0
        $Ws.Column(3).Width = 60


        $Ws= $ExcelData.Workbook.WorkSheets["_results"]
        $Ws.Column(1).Width = 44
        $Ws.Column(2).Width = 20
        $Ws.Column(3).Width = 25
        $Ws.Column(4).Width = 25
        $Ws.Column(5).Width = 60

        #make hypelink to _link tab  
        foreach ($xlTab in $ExcelData.Workbook.WorkSheets)
        {
            $TabData=$xlTab.Cells 
            $TabData[1,1].Formula = "=Hyperlink(`"#_List!A1`" ,`"<-`")"
        
        }
         

     
    Close-ExcelPackage $ExcelData -SaveAs "$OutputFolder\BP_Check_Final.xlsx"
}

function Compress-SourceFiles{
param (
    [string] $FolderName,
    [bool] $CompressFiles,
    [Bool] $CompressPlans)
    
    cd $FolderName;

    $csvs = Get-ChildItem .\* -Include *.csv | Sort-Object Name

    if ($CompressFiles -eq $true)
    {
     Write-Host "Zipping individual files into archive $FolderName\CvsArchive.zip" -ForegroundColor Yellow
     foreach ($csv in $csvs)
     {
        Compress-Archive -Path $csv -DestinationPath "$FolderName\CvsArchive.zip" -Update
        Remove-Item -Path $csv
     }
    
    }
}

function Get-ResultsFile{
    param (
    [string] $folder_path
    ) 

$search_values = @("[INFORMATION", "[WARNING" )
$excluded_values = @("Discontinued", "Deprecated" )
$Results_file = $folder_path + "\_results.csv"
$List_file = $folder_path + "\_list.csv"

Write-Host Analyzing : $folder_path  -ForegroundColor Yellow

$results = @()

$file_paths = Get-ChildItem -Path $folder_path -Filter *.csv 
   
   Add-Content -Path $List_file -Value "Name,Link"

# Loop through each file
foreach ($file_path in $file_paths) {
    # Open the file
    #Write-Host $file_path.FullName  -ForegroundColor Yellow

    $LinkCol=get-TabName -text $($file_path)  -Length 29
    Add-Content -Path $List_file -Value "$file_path,$LinkCol"

    $file_content = Get-Content -LiteralPath $file_path.FullName

    # Loop through each line in the file
    foreach ($line in $file_content) {
        foreach ($search_value in $search_values ) {
            # Check if the line contains the search value
            if ($line.Contains($search_value)) {
                # If the line contains the search value, output it to the console
                #Write-Host $file_path : [Info] $line 
                

                $start_pos = $line.IndexOf($search_value)
                $end_pos   = $line.IndexOf("]", $start_pos + $search_value.Length)
                $subRes    = $line.Substring($start_pos, $end_pos - $start_pos + 1)
                #$Category  = $line.Substring(0,$start_pos)

                $Category  = $line.Substring(0,$line.IndexOf(" ")) 
                $CategorySplit =  $line.Substring(0,$start_pos).Split(",")


                $exclusion_Found = 0
                foreach ($exc in $excluded_values){
                if ($subRes.Contains($exc)) {
                $exclusion_Found ++    }}
                  
                if ($exclusion_Found -eq 0){

                $results += [PSCustomObject]@{
                    FileName = $file_path.Name
                    SearchType = $search_value.Substring(1, $search_value.Length-1 )
                    Category = $CategorySplit[0]
                    SubCategory = $CategorySplit[1]
                    SearchedText = $SubRes
                    Row = $line
                    #Cat = $Category

                    }
                }
            }
        }

    }

     
}

$results | Export-Csv -Path $Results_file -NoTypeInformation
Set-Content -LiteralPath $Results_file -Value ((Get-Content -LiteralPath $Results_file) -replace '"')
Write-Host Writing Results file to $Results_file  -ForegroundColor Yellow
} 

function Format-XML {
# thanks to https://vladdba.com/2023/01/17/save-execution-plan-files-powershell/
 [CmdletBinding()]
 Param (
        [Parameter(
            ValueFromPipeline=$true,
            Mandatory=$true)]
            [string]$XMLInput
            )
 $XMLDoc = New-Object -TypeName System.Xml.XmlDocument
 $XMLDoc.LoadXml($XMLInput)
 $SW = New-Object System.IO.StringWriter
 $Writer = New-Object System.Xml.XmlTextwriter($SW)
 $Writer.Formatting = [System.XML.Formatting]::Indented
 $XMLDoc.WriteContentTo($Writer)
 $SW.ToString()
  }

function TableHandler 
{
Param( 
    $tbl,
    [string]$TableName,
    [bool]$ExtractPlans 
    )
        Try
        {

         $headerRow = $tbl.Rows[0].psobject.properties.name 
         $headerRowText =  Out-String -InputObject $headerRow

         $Column1_Name=$headerRow[0]
         $Column2_Name=$headerRow[1]

         #$tbl.Rows[1].$($Column1_Name)
         #$tbl.Rows[1].$($Column2_Name)

         $A=Out-String -InputObject $tbl.Rows[0].$($Column1_Name)
         $B=Out-String -InputObject $tbl.Rows[0].$($Column2_Name)

         $NewTableName=$("'$A'$B'").Replace("`r`n","")
        }
        catch {}


            if (($NewTableName.Length -eq 0 ) -or ($NewTableName.Length -gt 80))
            {
                #$TableName = "Table$StrTableNum"}
                $TableName = "$StrTableNum"}
            else 
            {
                #$TableName= "Table$StrTableNum$NewTableName"}
                $TableName= "$StrTableNum$NewTableName"}


        if (($headerRowText.Length  -gt 0 ) -and ($ExtractPlans -eq $true))
        {
                $hasPlans = $false
                foreach ($ColName in $headerRow)
                    { 
                        if ($ColName -eq "query_plan") {$hasPlans = $true } # Write-Host "FOUND" -ForegroundColor Cyan }
                    }
                if ( $hasPlans -eq $true)
                {

                    Write-Host "Table with Plan found! [$StrTableNum]" -ForegroundColor Yellow
                        
                        $TablefolderPath = "$WorkingFolder\Table$StrTableNum"  
                        if (!(Test-Path $TablefolderPath -PathType Container)) 
                            {
                                New-Item -ItemType Directory -Force -Path $TablefolderPath | Out-Null
                            }

                    [int]$RowNum = 0
                            
                    foreach($row in $table)
                        {
                            [string]$SQLPlanFile = "Plan_$RowNum.sqlplan" 
                            $table.Rows[$RowNum]["query_plan"] | Format-XML | Set-Content  -Path "$WorkingFolder\Table$StrTableNum\$($SQLPlanFile)" -Force
                            $RowNum+=1
                        }


                } 
        }

       return $TableName

}

function BP_check-ToExcel-Main
{
Param( 
    $tbl,
    [string]$dataSource,
    [bool]$ExtractPlans 
    )

$database = "MSDB"
#$sqlcommand = "exec dbo.usp_bpcheck @diskfrag=0" #bypassing Pshell elevation error
$sqlcommand = "exec dbo.usp_bpcheck" 

$TimeGenerated=Get-Date -Format "ddMMyy_HHmm"
$Fldr="Bp_check_" + $($TimeGenerated)
$WorkingFolder = New-Item -Path  $env:TEMP -ItemType Directory -Name $Fldr

Write-Host "creating individual .cvs files in $WorkingFolder" -ForegroundColor Yellow

try{
    if ($dataSource -notmatch '.database.windows.net$')
    { 
        $connectionString = "Data Source=$dataSource; Integrated Security=True;Application Name=BP_Check PS runner;Initial Catalog=$database"
        $connection = new-object system.data.SqlClient.SQLConnection($connectionString)
    }
    else
    {
        Connect-AzAccount -SubscriptionID $subscriptionID | Out-Null
        $connectionString = "Server=$dataSource;Initial Catalog=MSDB;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;Application Name=BP_Check PS runner"
        $accessToken = (Get-AzAccessToken -ResourceUrl https://database.windows.net).Token

        $connection = new-object system.data.SqlClient.SQLConnection($connectionString)
        $connection.AccessToken = $accessToken
    }

    #$connectionString = "Data Source=$dataSource; Integrated Security=True;Application Name=BP_Check PS runner ; Initial Catalog=$database"
    #$connection = new-object system.data.SqlClient.SQLConnection($connectionString)
    $command = new-object system.data.sqlclient.sqlcommand($sqlCommand,$connection) 
    $command.CommandTimeout = 3600

    #Async handler of InfoMessage
    $handler = [System.Data.SqlClient.SqlInfoMessageEventHandler] {param($sender, $event) if ($event.Errors[0].Class -le 10) {Write-Host "Info_Msg :  $event" -ForegroundColor Green} else {Write-Host "Error_Msg :  $event" -ForegroundColor Red} }; 
    $connection.add_InfoMessage($handler); 


    $connection.FireInfoMessageEventOnUserErrors = $true;

    $connection.Open()
    $adapter = New-Object System.Data.sqlclient.sqlDataAdapter $command 
    $adapter.ContinueUpdateOnError=$true
    $dataset = New-Object System.Data.DataSet


        Write-Host "Running bp_check NOW, be patient! ..." -ForegroundColor Yellow

    $StartTime = $(get-date)
        $adapter.Fill($dataSet) | Out-Null -ErrorAction Continue
        #$connection.Close()
    $elapsedTime = NEW-TIMESPAN -Start $StartTime -End $(get-date)
    $elapsedTimeStr = '{0:00}:{1:00}' -f $elapsedTime.Minutes, $elapsedTime.Seconds
    Write-Host $("Connection Elapsed Time : [$elapsedTimeStr]") -ForegroundColor White

    }
catch{
     Write-Host $_.Exception.Message -ForegroundColor Red
    }
Finally
{
     $connection.Close()
}

$TableNum = 1

ForEach($table in $dataset.Tables)
{
        $StrTableNum= $TableNum.ToString("000")

        $T=TableHandler -tbl $table -TableName $StrTableNum -ExtractPlans $true
        
        #$table | Export-Csv -Path "$WorkingFolder\Table$StrTableNum.csv" -NoTypeInformation
        $table | Export-Csv -LiteralPath "$WorkingFolder\$T.csv"  -NoTypeInformation

        Set-Content -LiteralPath "$WorkingFolder\$T.csv" -Value ((Get-Content -LiteralPath "$WorkingFolder\$T.csv") -replace '"')


        $TableNum ++
        #Write-Host "Test$StrTableNum.csv"
}


Get-ResultsFile -folder_path $WorkingFolder

Cvs-ToExcel -FolderName $WorkingFolder -TimeStamp $TimeGenerated -OutputFolder $WorkingFolder 
Compress-SourceFiles -FolderName $WorkingFolder -CompressFiles $true

    $elapsedTimeTotal = NEW-TIMESPAN -Start $StartTime -End $(get-date)
    $elapsedTimeStr2 = '{0:00}:{1:00}' -f $elapsedTimeTotal.Minutes, $elapsedTimeTotal.Seconds
    Write-Host $("Total elapsed Time : [$elapsedTimeStr2]") -ForegroundColor White

ii .
}



BP_check-ToExcel-Main -dataSource $dataSource -ExtractPlans $true
